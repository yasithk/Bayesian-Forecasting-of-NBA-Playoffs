}
rho <- rep(0,10)
for (k in 1:10) {
rho[k] <- sum(psi[(0:(9-k))+1]*psi[(0:(9-k))+k+1])/sum(psi[(0:(9-k))+1]^2)
}
rho
phi
psi
series <- arima.sim(n=10,list(ar=0.8, ma=-0.7))
acf(series)[1:10]
rho
?acf
series <- arima.sim(n=48, list(ma== -0.8))
series <- arima.sim(n=48, list(ma= -0.8))
?acf
?arima
1+2*(0.49^2+0.31^2)
phi <- 0.4
theta <- 0.6
ACF <- ARMAacf(ar=phi,ma=-theta,lag.max=10)
ACF
plot(y=ACF[-1],x=1:10,xlab='Lag',ylab='ACF',type='h',ylim=c(-.2,.2))
abline(h=0)
acf(series)
acf(series,plot=F)
series1 <- arima.sim(n=48, list(ma=-0.8))
series1 <- arima.sim(n=48, list(ma=-0.8))
estimate.ma1.mom <- function(x) {
r <- acf(x,plot=F)$acf[1+1];
#the if statement checks for imaginary solutions pg 153
if (abs(r)<0.5) return((-1+sqrt(1-4*r^2))/(2*r)) else return(NA)
}
estimate.ma1.mom(series1)
series1 <- arima.sim(n=48, list(ma=-0.8))
estimate.ma1.mom <- function(x) {
r <- acf(x,plot=F)$acf[1+1];
#the if statement checks for imaginary solutions pg 153
if (abs(r)<0.5) return((-1+sqrt(1-4*r^2))/(2*r)) else return(NA)
}
estimate.ma1.mom(series1)
series1 <- arima.sim(n=48, list(ma=-0.8))
estimate.ma1.mom <- function(x) {
r <- acf(x,plot=F)$acf[1+1];
#the if statement checks for imaginary solutions pg 153
if (abs(r)<0.5) return((-1+sqrt(1-4*r^2))/(2*r)) else return(NA)
}
estimate.ma1.mom(series1)
series1 <- arima.sim(n=48, list(ma=-0.8))
estimate.ma1.mom <- function(x) {
r <- acf(x,plot=F)$acf[1+1];
#the if statement checks for imaginary solutions pg 153
if (abs(r)<0.5) return((-1+sqrt(1-4*r^2))/(2*r)) else return(NA)
}
estimate.ma1.mom(series1)
arima(series1, order = c(0,0,1), method = 'ML')
arima(series1, order = c(0,0,1), method = 'ML')
arima(series1, order = c(0,0,1), method = 'CSS')
arima(series1, order = c(0,0,1), method = 'ML')
series <- arima.sim(n=48,list(ma=-0.8))
arima(series, order = c(0,0,1), method = 'ML')
ACF <- ARMAacf(ar=phi,lag.max=10)
ACF
series <- arima.sim(n=100, list(mc=c(0.6,-0.3)))
arima(series1, order = c(0,0,2), method = 'CSS')
arima(series, order = c(0,0,2), method = 'CSS')
arima(series, order = c(0,0,2), method = 'MA')
arima(series, order = c(0,0,2), method = 'ML')
arima(series, order = c(0,0,2), method = 'ML')$coef[1]
arima(series, order = c(0,0,2), method = 'CSS')$coef[1]
arima(series, order = c(0,0,2), method = 'CSS')$coef[1:2]
arima(series, order = c(0,0,2), method = 'ML')$coef[1:2]
thetahat=rep(NA,1000)
for (k in 1:1000) {
series <- arima.sim(n=100,list(ma=0.6, -0.3));
thetahat[k] <- -arima(series,order=c(0,0,2),method=’ML’)$coef[1]
}
set.seed(12345)
series <- arima.sim(n=100, list(ma=c(0.6,-0.3)))
arima(series, order = c(0,0,2), method = 'CSS')$coef[1:2]
arima(series, order = c(0,0,2), method = 'ML')$coef[1:2]
set.seed(12345)
series <- arima.sim(n=100, list(ma=c(0.6,-0.3)))
arima(series, order = c(0,0,2), method = 'CSS')$coef[1:2]
arima(series, order = c(0,0,2), method = 'ML')$coef[1:2]
series <- arima.sim(n=100, list(mc=c(0.6,-0.3)))
arima(series, order = c(0,0,2), method = 'CSS')$coef[1:2]
arima(series, order = c(0,0,2), method = 'ML')$coef[1:2]
thetahat=rep(NA,1000)
series <- arima.sim(n=100, list(ma=c(0.6,-0.3)))
arima(series, order = c(0,0,2), method = 'CSS')$coef[1:2]
arima(series, order = c(0,0,2), method = 'ML')$coef[1:2]
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[k] <- -arima(series,order=c(0,0,1),method=’ML’)$coef[1]
thetahat[k] <- arima(series,order=c(0,0,1),method=’ML’)$coef[1]
thetahat[k] <-
arima(series, order = c(0,0,2), method = 'ML')$coef[1:2]}
thetahat=rep(NA,1000)
for (k in 1:1000) {
series <- arima.sim(n=48,list(ma=0.6));
thetahat[k] <- arima(series,order=c(0,0,2),method=’ML’)$coef[1]
}
thetahat=rep(NA,1000)
for (k in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[k] <- arima(series,order=c(0,0,2),method=’ML’)$coef[1]
}
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method=’ML’)$coef[1]
}
series1 <- arima.sim(n=48,list(ma=0.6))
thetahat=rep(NA,1000)
for (k in 1:1000) {
series1 <- arima.sim(n=48,list(ma=0.6));
thetahat[k] <- -arima(series1,order=c(0,0,1),method=’ML’)$coef[1]
}
series1 <- arima.sim(n=48,list(ma=0.6))
thetahat=rep(NA,1000)
for (k in 1:1000) {
series1 <- arima.sim(n=48,list(ma=0.6));
thetahat[k] <- -arima(series1,order=c(0,0,1),method ="ML")$coef[1]
}
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method="ML")$coef[1]
}
mean(thetahat)
sd(thetahat)^2
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method="ML")$coef[1:2]
}
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method="ML")
}
mean(thetahat)
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method="ML")$coef[2]
}
mean(thetahat)
sd(thetahat)^2
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method="CSS")$coef[1]
}
mean(thetahat)
sd(thetahat)^2
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method="CSS")$coef[2]
}
mean(thetahat)
sd(thetahat)^2
1-0.3^2
/100
(1-0.3^2)/100
library("TSA")
install.packages("TSA")
library("TSA")
data(robot)
robot
ar1=arima(robot,order=c(1,1,0))
ar1
ar1
ar1=arima(robot,order=c(1,0,0))
ar1
ar2=arima(robot,order=c(2,0,0))
mod2
ar2
ar3=arima(robot, order=c(3,0,0))
ar3
ar4=arima(robot, order=c(4,0,0))
ar4
arma1 = arma(robot, order = c(3,1))
arma1
arma2 =arima(robot, order=c(3,0,1))
arma2
ar3
ar4=arima(robot, order=c(4,0,0))@coef[3]
ar3=arima(robot, order=c(3,0,0))
ar3
arma1 = arma(robot, order = c(3,1))
arma1
arma2 =arima(robot, order=c(3,0,1))
arma2
arma2 =arima(robot, order=c(2,0,1))
arma2
LB.test(ar3,lag=9)
> shapiro.test(residuals(ar3))
shapiro.test(residuals(ar3))
LB.test(ar2,lag=9)
shapiro.test(residuals(ar3))
ar1
ar2
ar3=arima(robot, order=c(3,0,0))
ar3
ar2pacf = ARMAacf(ar = c(.7),lag.max = 10, pacf=TRUE)
ar2pacf
ar2pacf = ARMAacf(ar = c(.7),lag.max = 10, pacf=FALSE)
ar2pacf
?ARMAacf
ar2pacf = ARMAacf(ar = c(0, .7),lag.max = 10, pacf=FALSE)
ar2pacf
ar2pacf = ARMAacf(ar = c(.7),lag.max = 10, pacf=FALSE)
ar2pacf
ar2pacf = ARMAacf(ar = c(0, .7),lag.max = 10, pacf=FALSE)
ar2pacf
ar2pacf = ARMAacf(ar = c(0, .7),lag.max = 10, pacf=TRUE)
ar2pacf
series <- arima.sim(n=100, list(ar=c(0,0.7)))
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
}
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
pacf(series3, plot = F)
}
set.seed(12345)
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
pacfs <-pacf(series3, plot = F)
}
set.seed(12345)
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
pacfs <-pacf(series3, plot = F)
}
pacfs
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
r1p[k] <- pacf(series3, lag.max = 10, plot = F)$acf[1+1]
r2p[k] <- pacf(series3, lag.max = 10, plot = F)$acf[1+2]
}
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
#r1p[k] <- pacf(series3, lag.max = 10, plot = F)$acf[1+1]
#r2p[k] <- pacf(series3, lag.max = 10, plot = F)$acf[1+2]
}
r1
mean(r1)
pacfs <-pacf(series3, plot = F)
acfs3 <- acf(series)
acfs3 <- acf(series, plot=F)
pacfs
acfs3
sd(r1)
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
}
mean(r1)
sd(r1)^2
mean(r2)
sd(r2)^2
2+1
1+2
num <- 3
num <- as.vector(3)
num
num <- as.vector(3,3,4,5)
num <- as.vector([3,3,4,5])
num <- as.array()[3,3,4,5]
num <- as.array(3,3,4,5)
num
num[2]
num <- as.array([3,3,4,5])
num <- [3,3,4,5]
num = [3,3,4,5]
[1,45,56]
array(data=NA, dim=3)
array(data=NA, dim=6)
library(rstan)
install.packages("rstan")
library(rstan)
library(bayesplot)
install.packages("bayesplot")
library(rstan)
library(bayesplot)
setwd("~/Honours/Data/Scrapping/Dataframes/Weights")
data <- read.csv("daysofrest.csv", header = TRUE)
View(data)
data <- data$WA1
for(g in 1:12){
data <- data$WA[g]
}
for(g in 1:12){
data$WA[g]
}
View(data)
data <- read.csv("daysofrest.csv", header = TRUE)
for(g in 1:12){
data$WA[g] <- NA
}
View(data)
data2 <- read.csv("daysofrest.csv", header = TRUE)
(A.MP[1] / sum(data2$A.MP[1:12]))
(A.MP(1) / sum(data2$A.MP[1:12]))
(data2$A.MP[1]) / sum(data2$A.MP[1:12]))
data2$A.MP[1]) / sum(data2$A.MP[1:12])
data2$A.MP[1] / sum(data2$A.MP[1:12])
data2$A.MP[1]
typeof(data2$2A.MP2)
typeof(data2$A.MP2)
data2$A.MP2
data2$A.MP2[1]
data2$A.MP2[,1]
data2$A.MP2[1,]
data2$A.MP2[1,1
]
data2$A.MP2[1,1]
data2$A.MP2[1]
data2$A.MP2[8]
d <- data2$A.MP2[8]
d
data2[A.MP2,8]
data2["A.MP2",8]
data2[1,"A.MP2"]
data2[1,15]
data2[1,16]
data2[1,16][1]
data2[1,16,1]
View(data2[1,16,1])
View(data2[1,16])
View(data2[1,14])
View(data2[1,18])
View(data2[1,10])
data2$A.MP1 <- as.integer(data2$A.MP1)
data2$A.MP1 <- as.integer(data2$A.MP1)
?read.csv
data2 <- read.csv("daysofrest.csv", header = TRUE, stringsAsFactors = F )
data2$A.MP1 <- as.Date(data2$A.MP1)
data2$A.MP1 <- as.Date.numeric(data2$A.MP1)
begin <- 20:30
end <- gsub("[: ]", "" , begin, perl=TRUE)
end
end <- gsub(": ", "" , begin, perl=TRUE)
end
begin <- "20:30"
end <- gsub(": ", "" , begin, perl=TRUE)
end
end <- gsub(":", "" , begin, perl=TRUE)
end
data2$MP1 <- gsub(":", "", data$MP1, perl = TRUE)
data2$MP1
for(i in 1:12){
data2$MP[i] <- gsub(":", "", data$MP[i], perl = TRUE)
}
data2$MP[i] <- gsub(":", "", data2$MP[i], perl = TRUE)
data2$MP[i] <- gsub(":", "", data$MP[i], perl = TRUE)
data2$MP[i] <- gsub(":", "", data2$MP[i], perl = TRUE)
?gsub
data2$A.MP[i] = gsub(":", "", data2$A.MP[i], perl = TRUE)
data2$MP1 <- gsub(":", "", data2$MP1, perl = TRUE)
strtrim("gfdh", 3)
strtrim("32:13:00", 5)
data2$MP[i] <- strtrim(data2$MP[i], 5)
strtrim(data2$MP1, 5)
strtrim("32:13:00", 5)
strtrim(data2$MP1, 4)
data2$MP1 <- strtrim(data2$MP1, 5)
for (i in 1:12){
data2$MP[i] <- strtrim(data2$MP[i], 5)
}
View(data2)
data2$MP1 <- strtrim(data2$MP1, 4)
x<- unlist(strsplit("2:00:00 3:00:00 6:00:00 4:00:00 4:00:00 3:00:48 1:00:00 3:00:00 2:00:00 4:00:00 1:30:00 2:00:00 1:00:00 3:00:00 4:00:00 4:30:00 5:00:00", "[[:space:]]+"))
x
x<- unlist(strsplit("22:30:00 23:00:00 36:00:00 44:05:00 4:00:00 ", "[[:space:]]+"))
x
strtrim(x, 4)
x<- unlist(strsplit("22:30:00 23:00:00 36:00:00 44:05:00 4:00:00 ", "[[:space:]]+"))
x <- strtrim(x, 5)
x
as.numeric(strptime(x, format="%M:%S") - as.POSIXct(format(Sys.Date())), units="secs")
?as.POSIXct
as.numeric(strptime(x, format="%M:%S") - as.POSIXct(format(Sys.Date())), units="mins")
data2$MP1 <- strptime(data$MP1, 5)
data2$MP1 <- gsub(":", "", data2$MP1, perl = TRUE)
data2$MP1 <- strptime(data$MP1, 5)
data2$MP1
data2$MP2 <- gsub(":", "", data2$MP2, perl = TRUE)
data2$MP1 <- strptime(data$MP1, 5)
data2$MP2
data2$MP2 <- strptime(data$MP2, 4)
data2$MP2 <- strptime(data2$MP2, 4)
data2$MP2 <- gsub(":", "", data2$MP2, perl = TRUE)
data2$MP2 <- strptime(data2$MP2, 4)
data2$MP2
data2$MP2 <- strtrim(data2$MP2, 4)
data2$MP2
data2 <- read.csv("daysofrest.csv", header = TRUE, stringsAsFactors = F )
data2$MP2
data2$MP2 <- strtrim(data2$MP2, 5)
data2$MP2
as.numeric(strptime(data2$MP2, format = "%M:%S") - as.POSIXct(format(Sys.Date())), units="mins")
data2$MP2<-as.numeric(strptime(data2$MP2, format = "%M:%S") - as.POSIXct(format(Sys.Date())), units="mins")
for( i in 1:12){
data2$MP[i] <- strtrim(data2$MP[i], 5)
data2$MP[i]<-as.numeric(strptime(data2$MP[i], format = "%M:%S") - as.POSIXct(format(Sys.Date())), units="mins")
}
?ncol
library(dplyr)
library(dplyr)
select(data2, num_range("MP", 1:3))
for( i in 1:12){
data2$MP[,i] <- strtrim(data2$MP[,i], 5)
#data2$MP[,i]<-as.numeric(strptime(data2$MP[i], format = "%M:%S") - as.POSIXct(format(Sys.Date())), units="mins")
}
assign(string, strtrim(data2$MP[i],5))
string <- paste("MP", i, sep = "")
assign(string, strtrim(data2$MP[i],5))
string
for( i in 1:10){}
for( i in 1:10){nam <- paste("A", i, sep = "")}
nam
for( i in 1:12){
data2[,paste("MP", i)] <- strtrim(data2[,paste("MP", i)], 5)
data2[,paste("MP", i)]<- as.numeric(strptime(data2[,paste("MP", i)], format = "%M:%S") - as.POSIXct(format(Sys.Date())), units="mins")
}
for( i in 1:3){
data2[,paste("MP", i)] <- strtrim(data2[,paste("MP", i)], 5)
data2[,paste("MP", i)]<- as.numeric(strptime(data2[,paste("MP", i)], format = "%M:%S") - as.POSIXct(format(Sys.Date())), units="mins")
}
assign(paste("MP", i, sep = "")<- strtrim(data2$MP[i],5))
assign(paste("MP", i, sep = "") <- strtrim(data2$MP[i],5))
for( i in 1:3){
data2[,paste("MP", i)] <- strtrim(data2[,paste("MP", i)], 5)
data2[,paste("MP", i)]<- as.numeric(strptime(data2[,paste("MP", i)], format = "%M:%S") - as.POSIXct(format(Sys.Date())), units="mins")
}
for( i in 1:3){
data2[,paste("MP", i)]}
for( i in 1:3){
paste("MP", i)}
for( i in 1:3){
x<-paste("MP", i)}
x
x<- NaN
for( i in 1:3){
x<-paste("MP", i, sep = "")}
x
data2[,"MP3"]
for( i in 1:3){
data2[,paste("MP", i, sep = "")] <- strtrim(data2[,paste("MP", i,sep = "")], 5)
data2[,paste("MP", i,sep = "")]<- as.numeric(strptime(data2[,paste("MP", i,sep = "")], format = "%M:%S") - as.POSIXct(format(Sys.Date())), units="mins")
}
data2 <- read.csv("daysofrest.csv", header = TRUE, stringsAsFactors = F )
for( i in 1:12){
data2[,paste("MP", i, sep = "")] <- strtrim(data2[,paste("MP", i,sep = "")], 5)
data2[,paste("MP", i,sep = "")]<- as.numeric(strptime(data2[,paste("MP", i,sep = "")], format = "%M:%S") - as.POSIXct(format(Sys.Date())), units="mins")
}
data2[,MP2]
data2[,"Mp2"]
data2[,"MP2"]
data2[1,"MP2"]
?sum
sum(2,3,4,5)
x<- (2,4)
x <- [2,4]
x <- c(2,4)
sum(x)
sum(data2[1,paste("MP", i, sep = "")])
for (i in 1:3){sum(data2[1,paste("MP", i, sep = "")])}
for (i in 1:3){x<- sum(data2[1,paste("MP", i, sep = "")])}
x
for (i in 1:3){x<- sum(data2[1,paste("MP", i, sep = "")])
sum(x)}
for (i in 1:3){x<- sum(data2[1,paste("MP", i, sep = "")])
y <-sum(x)}
y
for (i in 1:5){x<- sum(data2[1,paste("MP", i, sep = "")])
y <-sum(x)}
y
for (i in 1:5){x<- data2[1,paste("MP", i, sep = "")]
y <-sum(x)}
y
(78+73+73)/3
