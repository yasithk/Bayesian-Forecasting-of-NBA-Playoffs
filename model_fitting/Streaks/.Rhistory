psi <- rep(0,10)
psi[0+1] <- 1
phi <- 0.8
theta <- -0.7
for (j in 1:99) {
psi[1+j] <- (phi+theta)*psi[j-1]-phi*psi[j-2]
}
?arima.si
arima.sim
?arima.sim
psi <- rep(0,10)
psi[0+1] <- 1
psi[1+1] <- 0
phi <- 0.8
theta <- -0.7
for (j in 1:99) {
psi[1+j] <- (phi+theta)*psi[j-1]-phi*psi[j-2]
}
for (j in 2:99) {
psi[1+j] <- (phi+theta)*psi[j-1]-phi*psi[j-2]
}
psi <- rep(0,100)
psi[0+1] <- 1
phi <- 0.5
theta <- -0.2
for (j in 1:99) {
psi[1+j] <- (phi-theta)*phi^(j-1)
}
psi <- rep(0,10)
psi[0+1] <- 1
psi[1+1] <- 0
psi[1+2] <- -0.7
phi <- 0.8
theta <- -0.7
for (j in 2:99) {
psi[1+j] <- (phi+1)*psi[j-1]-phi*psi[j-2]
}
psi <- rep(0,10)
psi[0+1] <- 1
psi[1+1] <- 1.1
psi[1+2] <- 1.18
phi <- 0.8
theta <- -0.7
for (j in 3:99) {
psi[1+j] <- (phi+1)*psi[j-1]-phi*psi[j-2]
}
rho <- rep(0,10)
for (k in 1:10) {
rho[k] <- sum(psi[(0:(9-k))+1]*psi[(0:(9-k))+k+1])/sum(psi[(0:(9-k))+1]^2)
}
rho
psi
psi <- rep(0,10)
psi[0+1] <- 1
psi[1+1] <- 1.1
psi[1+2] <- 1.18
phi <- 0.8
theta <- -0.7
for (j in 3:9) {
psi[1+j] <- (phi+1)*psi[j-1]-phi*psi[j-2]
}
rho <- rep(0,10)
for (k in 1:10) {
rho[k] <- sum(psi[(0:(9-k))+1]*psi[(0:(9-k))+k+1])/sum(psi[(0:(9-k))+1]^2)
}
rho
phi
psi
series <- arima.sim(n=10,list(ar=0.8, ma=-0.7))
acf(series)[1:10]
rho
?acf
series <- arima.sim(n=48, list(ma== -0.8))
series <- arima.sim(n=48, list(ma= -0.8))
?acf
?arima
1+2*(0.49^2+0.31^2)
phi <- 0.4
theta <- 0.6
ACF <- ARMAacf(ar=phi,ma=-theta,lag.max=10)
ACF
plot(y=ACF[-1],x=1:10,xlab='Lag',ylab='ACF',type='h',ylim=c(-.2,.2))
abline(h=0)
acf(series)
acf(series,plot=F)
series1 <- arima.sim(n=48, list(ma=-0.8))
series1 <- arima.sim(n=48, list(ma=-0.8))
estimate.ma1.mom <- function(x) {
r <- acf(x,plot=F)$acf[1+1];
#the if statement checks for imaginary solutions pg 153
if (abs(r)<0.5) return((-1+sqrt(1-4*r^2))/(2*r)) else return(NA)
}
estimate.ma1.mom(series1)
series1 <- arima.sim(n=48, list(ma=-0.8))
estimate.ma1.mom <- function(x) {
r <- acf(x,plot=F)$acf[1+1];
#the if statement checks for imaginary solutions pg 153
if (abs(r)<0.5) return((-1+sqrt(1-4*r^2))/(2*r)) else return(NA)
}
estimate.ma1.mom(series1)
series1 <- arima.sim(n=48, list(ma=-0.8))
estimate.ma1.mom <- function(x) {
r <- acf(x,plot=F)$acf[1+1];
#the if statement checks for imaginary solutions pg 153
if (abs(r)<0.5) return((-1+sqrt(1-4*r^2))/(2*r)) else return(NA)
}
estimate.ma1.mom(series1)
series1 <- arima.sim(n=48, list(ma=-0.8))
estimate.ma1.mom <- function(x) {
r <- acf(x,plot=F)$acf[1+1];
#the if statement checks for imaginary solutions pg 153
if (abs(r)<0.5) return((-1+sqrt(1-4*r^2))/(2*r)) else return(NA)
}
estimate.ma1.mom(series1)
arima(series1, order = c(0,0,1), method = 'ML')
arima(series1, order = c(0,0,1), method = 'ML')
arima(series1, order = c(0,0,1), method = 'CSS')
arima(series1, order = c(0,0,1), method = 'ML')
series <- arima.sim(n=48,list(ma=-0.8))
arima(series, order = c(0,0,1), method = 'ML')
ACF <- ARMAacf(ar=phi,lag.max=10)
ACF
series <- arima.sim(n=100, list(mc=c(0.6,-0.3)))
arima(series1, order = c(0,0,2), method = 'CSS')
arima(series, order = c(0,0,2), method = 'CSS')
arima(series, order = c(0,0,2), method = 'MA')
arima(series, order = c(0,0,2), method = 'ML')
arima(series, order = c(0,0,2), method = 'ML')$coef[1]
arima(series, order = c(0,0,2), method = 'CSS')$coef[1]
arima(series, order = c(0,0,2), method = 'CSS')$coef[1:2]
arima(series, order = c(0,0,2), method = 'ML')$coef[1:2]
thetahat=rep(NA,1000)
for (k in 1:1000) {
series <- arima.sim(n=100,list(ma=0.6, -0.3));
thetahat[k] <- -arima(series,order=c(0,0,2),method=’ML’)$coef[1]
}
set.seed(12345)
series <- arima.sim(n=100, list(ma=c(0.6,-0.3)))
arima(series, order = c(0,0,2), method = 'CSS')$coef[1:2]
arima(series, order = c(0,0,2), method = 'ML')$coef[1:2]
set.seed(12345)
series <- arima.sim(n=100, list(ma=c(0.6,-0.3)))
arima(series, order = c(0,0,2), method = 'CSS')$coef[1:2]
arima(series, order = c(0,0,2), method = 'ML')$coef[1:2]
series <- arima.sim(n=100, list(mc=c(0.6,-0.3)))
arima(series, order = c(0,0,2), method = 'CSS')$coef[1:2]
arima(series, order = c(0,0,2), method = 'ML')$coef[1:2]
thetahat=rep(NA,1000)
series <- arima.sim(n=100, list(ma=c(0.6,-0.3)))
arima(series, order = c(0,0,2), method = 'CSS')$coef[1:2]
arima(series, order = c(0,0,2), method = 'ML')$coef[1:2]
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[k] <- -arima(series,order=c(0,0,1),method=’ML’)$coef[1]
thetahat[k] <- arima(series,order=c(0,0,1),method=’ML’)$coef[1]
thetahat[k] <-
arima(series, order = c(0,0,2), method = 'ML')$coef[1:2]}
thetahat=rep(NA,1000)
for (k in 1:1000) {
series <- arima.sim(n=48,list(ma=0.6));
thetahat[k] <- arima(series,order=c(0,0,2),method=’ML’)$coef[1]
}
thetahat=rep(NA,1000)
for (k in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[k] <- arima(series,order=c(0,0,2),method=’ML’)$coef[1]
}
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method=’ML’)$coef[1]
}
series1 <- arima.sim(n=48,list(ma=0.6))
thetahat=rep(NA,1000)
for (k in 1:1000) {
series1 <- arima.sim(n=48,list(ma=0.6));
thetahat[k] <- -arima(series1,order=c(0,0,1),method=’ML’)$coef[1]
}
series1 <- arima.sim(n=48,list(ma=0.6))
thetahat=rep(NA,1000)
for (k in 1:1000) {
series1 <- arima.sim(n=48,list(ma=0.6));
thetahat[k] <- -arima(series1,order=c(0,0,1),method ="ML")$coef[1]
}
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method="ML")$coef[1]
}
mean(thetahat)
sd(thetahat)^2
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method="ML")$coef[1:2]
}
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method="ML")
}
mean(thetahat)
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method="ML")$coef[2]
}
mean(thetahat)
sd(thetahat)^2
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method="CSS")$coef[1]
}
mean(thetahat)
sd(thetahat)^2
thetahat=rep(NA,1000)
for (i in 1:1000) {
series <- arima.sim(n=100,list(ma=c(0.6,-0.3)));
thetahat[i] <- arima(series,order=c(0,0,2),method="CSS")$coef[2]
}
mean(thetahat)
sd(thetahat)^2
1-0.3^2
/100
(1-0.3^2)/100
library("TSA")
install.packages("TSA")
library("TSA")
data(robot)
robot
ar1=arima(robot,order=c(1,1,0))
ar1
ar1
ar1=arima(robot,order=c(1,0,0))
ar1
ar2=arima(robot,order=c(2,0,0))
mod2
ar2
ar3=arima(robot, order=c(3,0,0))
ar3
ar4=arima(robot, order=c(4,0,0))
ar4
arma1 = arma(robot, order = c(3,1))
arma1
arma2 =arima(robot, order=c(3,0,1))
arma2
ar3
ar4=arima(robot, order=c(4,0,0))@coef[3]
ar3=arima(robot, order=c(3,0,0))
ar3
arma1 = arma(robot, order = c(3,1))
arma1
arma2 =arima(robot, order=c(3,0,1))
arma2
arma2 =arima(robot, order=c(2,0,1))
arma2
LB.test(ar3,lag=9)
> shapiro.test(residuals(ar3))
shapiro.test(residuals(ar3))
LB.test(ar2,lag=9)
shapiro.test(residuals(ar3))
ar1
ar2
ar3=arima(robot, order=c(3,0,0))
ar3
ar2pacf = ARMAacf(ar = c(.7),lag.max = 10, pacf=TRUE)
ar2pacf
ar2pacf = ARMAacf(ar = c(.7),lag.max = 10, pacf=FALSE)
ar2pacf
?ARMAacf
ar2pacf = ARMAacf(ar = c(0, .7),lag.max = 10, pacf=FALSE)
ar2pacf
ar2pacf = ARMAacf(ar = c(.7),lag.max = 10, pacf=FALSE)
ar2pacf
ar2pacf = ARMAacf(ar = c(0, .7),lag.max = 10, pacf=FALSE)
ar2pacf
ar2pacf = ARMAacf(ar = c(0, .7),lag.max = 10, pacf=TRUE)
ar2pacf
series <- arima.sim(n=100, list(ar=c(0,0.7)))
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
}
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
pacf(series3, plot = F)
}
set.seed(12345)
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
pacfs <-pacf(series3, plot = F)
}
set.seed(12345)
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
pacfs <-pacf(series3, plot = F)
}
pacfs
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
r1p[k] <- pacf(series3, lag.max = 10, plot = F)$acf[1+1]
r2p[k] <- pacf(series3, lag.max = 10, plot = F)$acf[1+2]
}
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
#r1p[k] <- pacf(series3, lag.max = 10, plot = F)$acf[1+1]
#r2p[k] <- pacf(series3, lag.max = 10, plot = F)$acf[1+2]
}
r1
mean(r1)
pacfs <-pacf(series3, plot = F)
acfs3 <- acf(series)
acfs3 <- acf(series, plot=F)
pacfs
acfs3
sd(r1)
r1 <-rep(NA,1000)
r2 <-r1
for (k in 1:1000){
series3 <- arima.sim(n=100, list(ar=c(0,0.7)))
r1[k] <- acf(series3, lag.max = 10, plot=F)$acf[1+1]
r2[k] <- acf(series3, lag.max = 10, plot = F)$acf[1+2]
}
mean(r1)
sd(r1)^2
mean(r2)
sd(r2)^2
setwd("~/Honours/Model/Model Fitting/Streaks")
data <- read.csv("data.csv", header =T)
W <- 0
L <- 0
data <- read.csv("data.csv", header =T)
nba <- read.csv("data.csv", header =T)
attach(nba)
attach(nba)
nba$A.Score[1]
attach(nba)
attach(nba)
for( i in 1:nrow(nba)){
if( A.Score[i] < H.Score[i])
nba$A.outcome[i] <- "L"
nba$H.outcome[i] <- "W"
if (A.Score[i] > H.Score[i])
nba$A.outcome[i] <- "W"
nba$H.outcome[i] <- "L"
}
View(nba)
for( i in 1:nrow(nba)){
if( A.Score[i] < H.Score[i])
nba$A.outcome[i] <- "L"
nba$H.outcome[i] <- "W"
}
attach(nba)
for( i in 1:nrow(nba)){
if( A.Score[i] < H.Score[i])
nba$A.outcome[i] <- "L"
if(A.Score[i] > H.Score[i])
nba$H.outcome[i] <- "W"
}
for( i in 1:nrow(nba)){
if( A.Score[i] < H.Score[i])
nba$A.outcome[i] <- "L"
if(A.Score[i] > H.Score[i])
nba$H.outcome[i] <- "L"
}
for( i in 1:nrow(nba)){
if( A.Score[i] < H.Score[i])
nba$A.outcome[i] <- "L" & nba$H.outcome[i] <- "W"
if(A.Score[i] > H.Score[i])
nba$H.outcome[i] <- "L" & nba$A.outcome[i] <- "W"
}
attach(nba)
for( i in 1:nrow(nba)){
if( A.Score[i] < H.Score[i])
nba$A.outcome[i] <- "L" & nba$H.outcome[i] <- "W"
if(A.Score[i] > H.Score[i])
nba$H.outcome[i] <- "L" & nba$A.outcome[i] <- "W"
}
for( i in 1:nrow(nba)){
if( A.Score[i] < H.Score[i])
nba$A.outcome[i] <- "L"
nba$H.outcome[i] <- "W"
if(A.Score[i] > H.Score[i])
nba$H.outcome[i] <- "L"
nba$A.outcome[i] <- "W"
}
H.Score[2]
A.Score[2]
?ifelse
?else
attach(nba)
for( i in 1:nrow(nba)){
if( A.Score[i] < H.Score[i]){
nba$A.outcome[i] <- "L"
nba$H.outcome[i] <- "W"
}
if(A.Score[i] > H.Score[i]){
nba$H.outcome[i] <- "L"
nba$A.outcome[i] <- "W"
}
}
W <- 0
L <- 0
W <- 0
L <- 0
attach(nba)
for( i in 1:nrow(nba)){
if( A.outcome[i] = "W" ){
W <- W + 1
nba$A.Streak[i] <- W
}
if( A.outcome[i] = "L"){
L <- L +1
nba$A.Streak[i] <- L
}
}
attach(nba)
for( i in 1:nrow(nba)){
if( A.outcome[i] == "W" ){
W <- W + 1
nba$A.Streak[i] <- W
}
if( A.outcome[i] == "L"){
L <- L +1
nba$A.Streak[i] <- L
}
}
for( i in 1:nrow(nba)){
if( A.outcome[i] == "W" ){
W <- W + 1
nba$A.Streak[i] <- W
}
# if( A.outcome[i] == "L"){
#   L <- L +1
#   nba$A.Streak[i] <- L
# }
}
W <- 0
L <- 0
attach(nba)
for( i in 1:nrow(nba)){
if( A.outcome[i] == "W" ){
W <- W + 1
nba$A.Streak[i] <- W
}
# if( A.outcome[i] == "L"){
#   L <- L +1
#   nba$A.Streak[i] <- L
# }
}
attach(nba)
for( i in 1:nrow(nba)){
if( A.outcome[i] == "W" ){
W <- W + 1
nba$A.Streak[i] <- "W"
}
# if( A.outcome[i] == "L"){
#   L <- L +1
#   nba$A.Streak[i] <- L
# }
}
nba <- nba[,1:16]
nba <- read.csv("data.csv", header =T)
nba <- nba[,1:14]
attach(nba)
for( i in 1:nrow(nba)){
if( A.Score[i] < H.Score[i]){
nba$A.outcome[i] <- "L"
nba$H.outcome[i] <- "W"
}
if(A.Score[i] > H.Score[i]){
nba$H.outcome[i] <- "L"
nba$A.outcome[i] <- "W"
}
}
View(data)
